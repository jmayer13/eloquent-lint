{"version":3,"sources":["../lib/index.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAM,oBAAoB,mDAA1B;;AAEA;;;;;AAKA,SAAS,QAAT,CAAkB,SAAlB,EAA6B;AACzB,QAAI,EAAE,gBAAgB,QAAlB,CAAJ,EAAiC;AAC7B,eAAO,IAAI,QAAJ,CAAa,SAAb,CAAP;AACH;;AAED,0BAAO,SAAP,EAAkB,yCAAlB;;AAEA,SAAK,OAAL,GAAe,EAAf;AACA,SAAK,OAAL,GAAe,EAAf;AACA,SAAK,YAAL,CAAkB,SAAlB;AACA,SAAK,WAAL,CAAiB,EAAjB;AACA,SAAK,SAAL,CAAe,GAAf;AACA,SAAK,cAAL,CAAoB,QAApB;AACH;;AAED,SAAS,SAAT,CAAmB,YAAnB,GAAkC,UAAU,SAAV,EAAqB;AACnD,0BAAO,aAAG,MAAH,CAAU,SAAV,CAAP,EAA6B,wCAA7B;AACA,SAAK,SAAL,GAAiB,eAAK,OAAL,CAAa,SAAb,CAAjB;AACH,CAHD;;AAKA,SAAS,SAAT,CAAmB,YAAnB,GAAkC,YAAY;AAC1C,WAAO,KAAK,SAAZ;AACH,CAFD;;AAIA,SAAS,SAAT,CAAmB,WAAnB,GAAiC,UAAU,QAAV,EAAoB;AACjD,0BAAO,aAAG,MAAH,CAAU,QAAV,CAAP,EAA4B,kCAA5B;AACA,SAAK,QAAL,GAAgB,qBAAM,QAAN,CAAhB;AACH,CAHD;;AAKA,SAAS,SAAT,CAAmB,WAAnB,GAAiC,YAAY;AACzC,WAAO,KAAK,QAAZ;AACH,CAFD;;AAIA,SAAS,SAAT,CAAmB,SAAnB,GAA+B,UAAU,MAAV,EAAkB;AAC7C,0BAAO,aAAG,MAAH,CAAU,MAAV,CAAP,EAA0B,qCAA1B;AACA,SAAK,MAAL,GAAc,KAAK,IAAL,CAAU,MAAV,CAAd;AACH,CAHD;;AAKA,SAAS,SAAT,CAAmB,SAAnB,GAA+B,YAAY;AACvC,WAAO,KAAK,MAAZ;AACH,CAFD;;AAIA,SAAS,SAAT,CAAmB,cAAnB,GAAoC,UAAU,GAAV,EAAe;AAC/C,0BAAO,aAAG,MAAH,CAAU,GAAV,CAAP,EAAuB,yCAAvB;AACA,SAAK,WAAL,GAAmB,GAAnB;AACH,CAHD;;AAKA,SAAS,SAAT,CAAmB,cAAnB,GAAoC,YAAY;AAC5C,WAAO,KAAK,WAAZ;AACH,CAFD;;AAIA,SAAS,SAAT,CAAmB,SAAnB,GAA+B,UAAU,KAAV,EAAiB;AAC5C,SAAK,OAAL,GAAe,KAAK,OAAL,CAAa,MAAb,CAAoB,KAApB,CAAf;AACH,CAFD;;AAIA,SAAS,SAAT,CAAmB,SAAnB,GAA+B,YAAY;AACvC,WAAO,KAAK,OAAL,CAAa,KAAb,EAAP;AACH,CAFD;;AAIA;;;;;;AAMA,SAAS,SAAT,CAAmB,GAAnB,GAAyB,UAAU,MAAV,EAAkB;AACvC,0BAAO,MAAP,EAAe,gCAAf;;AAEA,SAAK,OAAL,CAAa,IAAb,CAAkB,MAAlB;AACA,WAAO,IAAP;AACH,CALD;;AAQA;;;;;;AAMA,SAAS,SAAT,CAAmB,IAAnB,GAA0B,YAAmB;AAAA,sCAAN,IAAM;AAAN,YAAM;AAAA;;AACzC,QAAM,QAAQ,GAAG,KAAH,CAAS,IAAT,CAAc,IAAd,CAAd;AACA,UAAM,OAAN,CAAc,KAAK,YAAL,EAAd;AACA,WAAO,eAAK,OAAL,0CAAgB,KAAhB,EAAP;AACH,CAJD;;AAMA;;;;;AAKA,SAAS,SAAT,CAAmB,OAAnB,GAA6B,+CAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACf,KAAK,IAAL,EADe;;AAAA;AAC7B,yBAD6B;AAAA;AAAA,2BAEnB,KAAK,GAAL,CAAS,KAAT,CAFmB;;AAAA;AAEjC,yBAFiC;AAAA,qDAG1B,KAH0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAR,EAA7B;;AAMA;;;;;;;AAOA,SAAS,SAAT,CAAmB,GAAnB,GAAyB,+CAAQ,kBAAW,KAAX,EAAkB,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AACvB,wBADuB,GAChB,mBAAS,WAAW,KAAK,OAAzB,CADgB;AAEvB,uBAFuB,GAEjB,wBAAS,KAAK,GAAL,CAAS,IAAT,CAAc,IAAd,CAAT,CAFiB;AAAA;AAAA,2BAGX,IAAI,KAAJ,EAAW,IAAX,CAHW;;AAAA;AAGvB,uBAHuB;AAAA,sDAItB,IAAI,CAAJ,CAJsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAR,EAAzB;;AAOA;;;;;;;AAOA,SAAS,SAAT,CAAmB,IAAnB,GAA0B,+CAAQ;AAAA,QAAW,GAAX,uEAAiB,KAAK,SAAL,EAAjB;AAAA,mEAgBrB,QAhBqB;AAAA;AAAA;AAAA;AAAA;AAgBrB,4BAhBqB,YAgBrB,QAhBqB,CAgBZ,IAhBY,EAgBN,IAhBM,EAgBA,CAhBA,EAgBG;AAC7B,4BAAM,mBAAmB,eAAK,QAAL,CAAc,GAAd,EAAmB,IAAnB,CAAzB;AACA,4BAAM,UAAU,iBAAE,KAAF,CAAQ,IAAR,CAAhB;AACA,gCAAQ,gBAAR,IAA4B,MAAM,CAAN,CAA5B;AACA,+BAAO,OAAP;AACH,qBArB6B;;AACxB,wBADwB,GACjB,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,CADiB;AAExB,+BAFwB,GAEV,KAAK,cAAL,EAFU;AAGxB,2BAHwB,GAGd,KAAK,SAAL,MAAoB,IAHN;AAAA;AAAA,2BAIV,kBAAkB,GAAlB,EAAuB,OAAvB,CAJU;;AAAA;AAIxB,yBAJwB;AAK1B,yBAL0B,GAKlB,EALkB;AAM1B,4BAN0B,GAMf,CANe;AAO1B,yBAP0B;;AAAA;AAAA,0BASvB,WAAW,MAAM,MATM;AAAA;AAAA;AAAA;;AAU1B,4BAAQ,MAAM,KAAN,CAAY,QAAZ,EAAsB,WAAW,WAAjC,CAAR;AAV0B;AAAA,2BAWZ,MAAM,GAAN,CAAU,IAAV,CAXY;;AAAA;AAW1B,yBAX0B;;AAY1B,4BAAQ,MAAM,MAAN,CAAa,KAAb,CAAR;AACA,gCAAY,WAAZ;AAb0B;AAAA;;AAAA;AAAA,sDAuBvB,MAAM,MAAN,CAAa,QAAb,EAAuB,EAAvB,CAvBuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAR,EAA1B;;AA0BA;;;;;;;AAOA,SAAS,SAAT,CAAmB,QAAnB,GAA8B,+CAAQ,kBAAW,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5B,uBAD4B,GACtB,EADsB;AAE5B,4BAF4B,GAEjB,KAAK,eAAL,CAAqB,IAArB,CAFiB;AAAA;AAAA;AAAA,2BAKT,oBAAG,QAAH,CAAY,QAAZ,CALS;;AAAA;AAKxB,0BALwB;;AAM9B,wBAAI,qBAAK,MAAL,CAAJ,EAAkB;AACd,4BAAI,QAAJ,GAAe,OAAO,QAAP,CAAgB,MAAhB,CAAf;AACA,4BAAI,KAAJ,GAAY,OAAO,QAAP,CAAgB,MAAhB,EAAwB,KAAxB,CAA8B,aAAG,GAAjC,CAAZ;AACH,qBAHD,MAGO;AACH,4BAAI,QAAJ,GAAe,OAAO,QAAP,EAAf;AACA,4BAAI,KAAJ,GAAY,OAAO,QAAP,GAAkB,KAAlB,CAAwB,aAAG,GAA3B,CAAZ;AACH;AAZ6B;AAAA;;AAAA;AAAA;AAAA;;AAc9B,iCAAE,OAAF,oCAA2C,IAA3C,cAAwD,aAAE,OAA1D;AACA,iCAAE,IAAF,GAAS,aAAT;AAf8B;;AAAA;AAAA,sDAmB3B,GAnB2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAR,EAA9B;;AAsBA,SAAS,SAAT,CAAmB,eAAnB,GAAqC,UAAU,IAAV,EAAgB;AACjD,QAAI,CAAC,wBAAS,IAAT,CAAL,EAAqB;AACjB,eAAO,eAAK,OAAL,CAAa,KAAK,SAAL,EAAb,EAA+B,IAA/B,CAAP;AACH;AACD,WAAO,IAAP;AACH,CALD;;AAOA;;;;;;;AAOA,SAAS,SAAT,CAAmB,YAAnB,GAAkC,UAAU,QAAV,EAAoB,IAApB,EAA0B,MAA1B,EAAkC,OAAlC,EAA2C;AACzE,0BAAO,aAAG,MAAH,CAAU,IAAV,CAAP,EAAwB,uBAAxB;AACA,0BAAO,aAAG,MAAH,CAAU,MAAV,CAAP,EAA0B,yBAA1B;AACA,YAAQ,GAAR,CAAe,QAAf,WAA6B,IAA7B,SAAqC,MAArC,SAA+C,OAA/C;AACH,CAJD;;kBAMe,Q","file":"eloquent.js","sourcesContent":["import absolute from \"absolute\";\r\nimport assert from \"assert\";\r\nimport clone from \"clone\";\r\nimport fs from \"co-fs-extra\";\r\nimport is from \"is\";\r\nimport path from \"path\";\r\nimport readdir from \"recursive-readdir\";\r\nimport thunkify from \"thunkify\";\r\nimport unyield from \"unyield\";\r\nimport utf8 from \"is-utf8\";\r\nimport Ware from \"ware\";\r\nimport os from \"os\";\r\nimport _ from \"lodash\";\r\n\r\nconst readdirThunkified = thunkify(readdir);\r\n\r\n/**\r\n * Initialize a new `Eloquent` builder with a working `directory`.\r\n *\r\n * @param {String} directory\r\n */\r\nfunction Eloquent(directory) {\r\n    if (!(this instanceof Eloquent)) {\r\n        return new Eloquent(directory);\r\n    }\r\n\r\n    assert(directory, \"You must pass a working directory path.\");\r\n\r\n    this.plugins = [];\r\n    this.ignores = [];\r\n    this.setDirectory(directory);\r\n    this.setMetadata({});\r\n    this.setSource(\".\");\r\n    this.setConcurrency(Infinity);\r\n}\r\n\r\nEloquent.prototype.setDirectory = function (directory) {\r\n    assert(is.string(directory), \"You must pass a directory path string.\");\r\n    this.directory = path.resolve(directory);\r\n};\r\n\r\nEloquent.prototype.getDirectory = function () {\r\n    return this.directory;\r\n};\r\n\r\nEloquent.prototype.setMetadata = function (metadata) {\r\n    assert(is.object(metadata), \"You must pass a metadata object.\");\r\n    this.metadata = clone(metadata);\r\n};\r\n\r\nEloquent.prototype.getMetadata = function () {\r\n    return this.metadata;\r\n};\r\n\r\nEloquent.prototype.setSource = function (source) {\r\n    assert(is.string(source), \"You must pass a source path string.\");\r\n    this.source = this.path(source);\r\n};\r\n\r\nEloquent.prototype.getSource = function () {\r\n    return this.source;\r\n};\r\n\r\nEloquent.prototype.setConcurrency = function (max) {\r\n    assert(is.number(max), \"You must pass a number for concurrency.\");\r\n    this.concurrency = max;\r\n};\r\n\r\nEloquent.prototype.getConcurrency = function () {\r\n    return this.concurrency;\r\n};\r\n\r\nEloquent.prototype.setIgnore = function (files) {\r\n    this.ignores = this.ignores.concat(files);\r\n};\r\n\r\nEloquent.prototype.getIgnore = function () {\r\n    return this.ignores.slice();\r\n};\r\n\r\n/**\r\n * Add a `plugin` function to the stack.\r\n *\r\n * @param {Function or Array} plugin\r\n * @return {Eloquent}\r\n */\r\nEloquent.prototype.use = function (plugin) {\r\n    assert(plugin, \"You must pass a valid function\");\r\n\r\n    this.plugins.push(plugin);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Resolve `paths` relative to the root directory.\r\n *\r\n * @param {String} paths...\r\n * @return {String}\r\n */\r\nEloquent.prototype.path = function (...args) {\r\n    const paths = [].slice.call(args);\r\n    paths.unshift(this.getDirectory());\r\n    return path.resolve(...paths);\r\n};\r\n\r\n/**\r\n * Process files through plugins without writing out files.\r\n *\r\n * @return {Object}\r\n */\r\nEloquent.prototype.process = unyield(function* () {\r\n    let files = yield this.read();\r\n    files = yield this.run(files);\r\n    return files;\r\n});\r\n\r\n/**\r\n * Run a set of `files` through the plugins stack.\r\n *\r\n * @param {Object} files\r\n * @param {Array} plugins\r\n * @return {Object}\r\n */\r\nEloquent.prototype.run = unyield(function* (files, plugins) {\r\n    const ware = new Ware(plugins || this.plugins);\r\n    const run = thunkify(ware.run.bind(ware));\r\n    const res = yield run(files, this);\r\n    return res[0];\r\n});\r\n\r\n/**\r\n * Read a dictionary of files from a `dir`, parsing frontmatter. If no directory\r\n * is provided, it will default to the source directory.\r\n *\r\n * @param {String} dir (optional)\r\n * @return {Object}\r\n */\r\nEloquent.prototype.read = unyield(function* (dir = this.getSource()) {\r\n    const read = this.readFile.bind(this);\r\n    const concurrency = this.getConcurrency();\r\n    const ignores = this.getIgnore() || null;\r\n    const paths = yield readdirThunkified(dir, ignores);\r\n    let files = [];\r\n    let complete = 0;\r\n    let batch;\r\n\r\n    while (complete < paths.length) {\r\n        batch = paths.slice(complete, complete + concurrency);\r\n        batch = yield batch.map(read);\r\n        files = files.concat(batch);\r\n        complete += concurrency;\r\n    }\r\n\r\n    function memoizer(memo, file, i) {\r\n        const relativePathFile = path.relative(dir, file);\r\n        const newMemo = _.clone(memo);\r\n        newMemo[relativePathFile] = files[i];\r\n        return newMemo;\r\n    }\r\n\r\n    return paths.reduce(memoizer, {});\r\n});\r\n\r\n/**\r\n * Read a `file` by path. If the path is not absolute, it will be resolved\r\n * relative to the source directory.\r\n *\r\n * @param {String} file\r\n * @return {Object}\r\n */\r\nEloquent.prototype.readFile = unyield(function* (file) {\r\n    const ret = {};\r\n    const filePath = this.getAbsolutePath(file);\r\n\r\n    try {\r\n        const buffer = yield fs.readFile(filePath);\r\n        if (utf8(buffer)) {\r\n            ret.contents = buffer.toString(\"utf8\");\r\n            ret.lines = buffer.toString(\"utf8\").split(os.EOL);\r\n        } else {\r\n            ret.contents = buffer.toString();\r\n            ret.lines = buffer.toString().split(os.EOL);\r\n        }\r\n    } catch (e) {\r\n        e.message = `Failed to read the file at: ${file} \\n\\n ${e.message}`;\r\n        e.code = \"failed_read\";\r\n        throw e;\r\n    }\r\n\r\n    return ret;\r\n});\r\n\r\nEloquent.prototype.getAbsolutePath = function (file) {\r\n    if (!absolute(file)) {\r\n        return path.resolve(this.getSource(), file);\r\n    }\r\n    return file;\r\n};\r\n\r\n/**\r\n * Print messages for lints\r\n *\r\n * @param {Number} line\r\n * @param {Number} column\r\n * @param {String} message\r\n */\r\nEloquent.prototype.printMessage = function (fileName, line, column, message) {\r\n    assert(is.number(line), \"line must be a number\");\r\n    assert(is.number(column), \"column must be a number\");\r\n    console.log(`${fileName} - ${line}:${column} ${message}`);\r\n};\r\n\r\nexport default Eloquent;\r\n"]}