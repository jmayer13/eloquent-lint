{"version":3,"sources":["../lib/index.js"],"names":["readdirThunkified","Eloquent","directory","plugins","ignores","setDirectory","setMetadata","setSource","setConcurrency","Infinity","prototype","string","resolve","getDirectory","metadata","object","getMetadata","source","path","getSource","max","number","concurrency","getConcurrency","setIgnore","files","concat","getIgnore","slice","use","plugin","push","args","paths","call","unshift","process","read","run","ware","bind","res","dir","memoizer","memo","file","i","relativePathFile","relative","newMemo","clone","readFile","complete","batch","length","map","reduce","ret","filePath","getAbsolutePath","buffer","contents","toString","lines","split","EOL","message","code","printMessage","fileName","line","column","console","log"],"mappings":"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","file":"index.js","sourcesContent":["import absolute from \"absolute\";\r\nimport assert from \"assert\";\r\nimport clone from \"clone\";\r\nimport fs from \"co-fs-extra\";\r\nimport is from \"is\";\r\nimport path from \"path\";\r\nimport readdir from \"recursive-readdir\";\r\nimport thunkify from \"thunkify\";\r\nimport unyield from \"unyield\";\r\nimport utf8 from \"is-utf8\";\r\nimport Ware from\"ware\";\r\nimport os from \"os\";\r\nimport _  from \"lodash\";\r\n\r\nconst readdirThunkified = thunkify(readdir);\r\n\r\n/**\r\n * Initialize a new `Eloquent` builder with a working `directory`.\r\n *\r\n * @param {String} directory\r\n */\r\nfunction Eloquent(directory) {\r\n    if (!(this instanceof Eloquent)) {\r\n        return new Eloquent(directory);\r\n    }\r\n\r\n    assert(directory, \"You must pass a working directory path.\");\r\n\r\n    this.plugins = [];\r\n    this.ignores = [];\r\n    this.setDirectory(directory);\r\n    this.setMetadata({});\r\n    this.setSource(\".\");\r\n    this.setConcurrency(Infinity);\r\n}\r\n\r\nEloquent.prototype.setDirectory = function (directory) {\r\n    assert(is.string(directory), \"You must pass a directory path string.\");\r\n    this.directory = path.resolve(directory);\r\n};\r\n\r\nEloquent.prototype.getDirectory = function () {\r\n    return this.directory;\r\n};\r\n\r\nEloquent.prototype.setMetadata = function (metadata) {\r\n    assert(is.object(metadata), \"You must pass a metadata object.\");\r\n    this.metadata = clone(metadata);\r\n};\r\n\r\nEloquent.prototype.getMetadata = function () {\r\n    return this.metadata;\r\n};\r\n\r\nEloquent.prototype.setSource = function (source) {\r\n    assert(is.string(source), \"You must pass a source path string.\");\r\n    this.source = this.path(source);\r\n};\r\n\r\nEloquent.prototype.getSource = function () {\r\n    return this.source;\r\n};\r\n\r\nEloquent.prototype.setConcurrency = function (max) {\r\n    assert(is.number(max), \"You must pass a number for concurrency.\");\r\n    this.concurrency = max;\r\n};\r\n\r\nEloquent.prototype.getConcurrency = function () {\r\n    return this.concurrency;\r\n};\r\n\r\nEloquent.prototype.setIgnore = function (files) {\r\n    this.ignores = this.ignores.concat(files);\r\n};\r\n\r\nEloquent.prototype.getIgnore = function () {\r\n    return this.ignores.slice();\r\n};\r\n\r\n/**\r\n * Add a `plugin` function to the stack.\r\n *\r\n * @param {Function or Array} plugin\r\n * @return {Eloquent}\r\n */\r\nEloquent.prototype.use = function (plugin) {\r\n    assert(plugin, \"You must pass a valid function\");\r\n\r\n    this.plugins.push(plugin);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Resolve `paths` relative to the root directory.\r\n *\r\n * @param {String} paths...\r\n * @return {String}\r\n */\r\nEloquent.prototype.path = function (...args) {\r\n    const paths = [].slice.call(args);\r\n    paths.unshift(this.getDirectory());\r\n    return path.resolve(...paths);\r\n};\r\n\r\n/**\r\n * Process files through plugins without writing out files.\r\n *\r\n * @return {Object}\r\n */\r\nEloquent.prototype.process = unyield(function* () {\r\n    let files = yield this.read();\r\n    files = yield this.run(files);\r\n    return files;\r\n});\r\n\r\n/**\r\n * Run a set of `files` through the plugins stack.\r\n *\r\n * @param {Object} files\r\n * @param {Array} plugins\r\n * @return {Object}\r\n */\r\nEloquent.prototype.run = unyield(function* (files, plugins) {\r\n    const ware = new Ware(plugins || this.plugins);\r\n    const run = thunkify(ware.run.bind(ware));\r\n    const res = yield run(files, this);\r\n    return res[0];\r\n});\r\n\r\n/**\r\n * Read a dictionary of files from a `dir`, parsing frontmatter. If no directory\r\n * is provided, it will default to the source directory.\r\n *\r\n * @param {String} dir (optional)\r\n * @return {Object}\r\n */\r\nEloquent.prototype.read = unyield(function* (dir = this.getSource()) {\r\n    const read = this.readFile.bind(this);\r\n    const concurrency = this.getConcurrency();\r\n    const ignores = this.getIgnore() || null;\r\n    const paths = yield readdirThunkified(dir, ignores);\r\n    let files = [];\r\n    let complete = 0;\r\n    let batch;\r\n\r\n    while (complete < paths.length) {\r\n        batch = paths.slice(complete, complete + concurrency);\r\n        batch = yield batch.map(read);\r\n        files = files.concat(batch);\r\n        complete += concurrency;\r\n    }\r\n\r\n    function memoizer(memo, file, i) {\r\n        const relativePathFile = path.relative(dir, file);\r\n        const newMemo = _.clone(memo);\r\n        newMemo[relativePathFile] = files[i];\r\n        return newMemo;\r\n    }\r\n\r\n    return paths.reduce(memoizer, {});\r\n});\r\n\r\n/**\r\n * Read a `file` by path. If the path is not absolute, it will be resolved\r\n * relative to the source directory.\r\n *\r\n * @param {String} file\r\n * @return {Object}\r\n */\r\nEloquent.prototype.readFile = unyield(function* (file) {\r\n    const ret = {};\r\n    const filePath = this.getAbsolutePath(file);\r\n\r\n    try {\r\n        const buffer = yield fs.readFile(filePath);\r\n        if (utf8(buffer)) {\r\n            ret.contents = buffer.toString(\"utf8\");\r\n            ret.lines = buffer.toString(\"utf8\").split(os.EOL);\r\n        } else {\r\n            ret.contents = buffer.toString();\r\n            ret.lines = buffer.toString().split(os.EOL);\r\n        }\r\n    } catch (e) {\r\n        e.message = `Failed to read the file at: ${file} \\n\\n ${e.message}`;\r\n        e.code = \"failed_read\";\r\n        throw e;\r\n    }\r\n\r\n    return ret;\r\n});\r\n\r\nEloquent.prototype.getAbsolutePath = function (file) {\r\n    if (!absolute(file)) {\r\n        return path.resolve(this.getSource(), file);\r\n    }\r\n    return file;\r\n};\r\n\r\n/**\r\n * Print messages for lints\r\n *\r\n * @param {Number} line\r\n * @param {Number} column\r\n * @param {String} message\r\n */\r\nEloquent.prototype.printMessage = function (fileName, line, column, message) {\r\n    assert(is.number(line), \"line must be a number\");\r\n    assert(is.number(column), \"column must be a number\");\r\n    console.log(`${fileName} - ${line}:${column} ${message}`);\r\n};\r\n\r\nexport default Eloquent;\r\n"]}